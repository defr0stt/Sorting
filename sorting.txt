#include <iostream>
using namespace std;

void Tabular_function_1(int mas[]);
void Tabular_function_2(int mas[]);

void Bubble_sort(int mas[]);
void Insertion_sort(int mas[]);
void Selection_sort(int mas[]);
void Shell_sort(int mas[]);

int main()
{
    int arr1[] = { 45,13,99,5,80,101,34 }, a;

    cout << "\n\t-----------------\n\t| Sorting types |\n\t-----------------\n\n\tBubble sort - 1\n\tInsertion sort - 2\n\tSelection sort - 3\n\tShell sort - 4\n\n\t-----------------\n\n     Enter type of sorting : ";
    cin >> a;
    cout << "   __________________________________________\n";

    switch (a)
    {
        case 1: Bubble_sort(arr1);
            break;
        case 2: Insertion_sort(arr1);
            break;
        case 3: Insertion_sort(arr1);
            break;
        case 4: Shell_sort(arr1);
            break;
        default:
            break;
    }
    
    return 0;

}

void Tabular_function_1(int mas[])
{
    cout << "  |\t\t\t\t\t     |\n  |  NOT sorted array: ";

    for (int i = 0; i < 7; i++) {
        cout << mas[i] << " "; // output of sorted elements
    }
    cout << " |";
}

void Tabular_function_2(int mas[])
{
    cout << "\n  |\t\t\t\t\t     |\n  |  Sorted array: ";

    for (int i = 0; i < 7; i++) {
        cout << mas[i] << " "; // output of sorted elements
    }
    cout << "     |\n  |__________________________________________|\n\n";
}

void Bubble_sort(int mas[])
{
    Tabular_function_1(mas);

    for (int i = 0; i < 7; i++) {       //7 - count of elements
        for (int j = 0; j < 6; j++) {
            if (mas[j] > mas[j + 1]) {
                int b = mas[j];         // temp variable
                mas[j] = mas[j + 1];    // swap positions
                mas[j + 1] = b;         // and values of elements
            }
        }
    }

    Tabular_function_2(mas);
}

void Insertion_sort(int mas[])
{

    Tabular_function_1(mas);

    int temp, // temp variable 
        item, // index of previous element
        * array_ptr=mas; //pointer on array
    for (int counter = 1; counter < 7; counter++) //7-array length 
    {
        temp = array_ptr[counter]; // temp = present element in array
        item = counter - 1;        // remember index of the previod element
        while (item >= 0 && array_ptr[item] > temp) 
        {
            array_ptr[item + 1] = array_ptr[item]; // swapping of array elements
            array_ptr[item] = temp;
            item--;
        }
    }

    Tabular_function_2(mas);
}

void Selection_sort(int mas[])
{
    int max = mas[0], count=7, f=0, a=0,b=1, temp;

    Tabular_function_1(mas);

    for (int i = 0; i < count; )     //7 - count of elements
    {                                //
        while(f!=count)              //from smaller to bigger   
        {                            //
            if (mas[a] >= mas[b])    //max elem in array goes to the last place
                b++;
            else
            {
                max = mas[b];
                a = b;
                b++;
            }
            f++;
        }
        temp = mas[count];
        mas[count] = mas[a];
        mas[a] = temp;
        count--;
        a = 0;
        b = 1;
    }

    Tabular_function_2(mas);
}

void Shell_sort(int mas[])
{

    Tabular_function_1(mas);

    int i, j, step;
    int tmp;
    for (step = 7 / 2; step > 0; step /= 2)     //7 - count of elements
        for (i = step; i < 7; i++)              //
        {                                       //sorting with using whjile step!=0
            tmp = mas[i];
            for (j = i; j >= step; j -= step)
            {
                if (tmp < mas[j - step])
                    mas[j] = mas[j - step];
                else
                    break;
            }
            mas[j] = tmp;
        }

    Tabular_function_2(mas);
}